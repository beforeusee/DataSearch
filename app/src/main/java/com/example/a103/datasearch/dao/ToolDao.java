package com.example.a103.datasearch.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.a103.datasearch.data.Tool;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOOL".
*/
public class ToolDao extends AbstractDao<Tool, Long> {

    public static final String TABLENAME = "TOOL";

    /**
     * Properties of entity Tool.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Serial = new Property(3, String.class, "serial", false, "SERIAL");
        public final static Property Brand = new Property(4, String.class, "brand", false, "BRAND");
        public final static Property CuttingDiameter = new Property(5, String.class, "cuttingDiameter", false, "CUTTING_DIAMETER");
        public final static Property CuttingDiameterTOLUpper = new Property(6, String.class, "cuttingDiameterTOLUpper", false, "CUTTING_DIAMETER_TOLUPPER");
        public final static Property CuttingDiameterTOLLower = new Property(7, String.class, "cuttingDiameterTOLLower", false, "CUTTING_DIAMETER_TOLLOWER");
        public final static Property FilletRadius = new Property(8, String.class, "filletRadius", false, "FILLET_RADIUS");
        public final static Property DepthOfCutMaximum = new Property(9, String.class, "depthOfCutMaximum", false, "DEPTH_OF_CUT_MAXIMUM");
        public final static Property MaxRampingAngle = new Property(10, String.class, "maxRampingAngle", false, "MAX_RAMPING_ANGLE");
        public final static Property UsableLength = new Property(11, String.class, "usableLength", false, "USABLE_LENGTH");
        public final static Property PeripheralEffectiveCuttingEdgeCount = new Property(12, String.class, "peripheralEffectiveCuttingEdgeCount", false, "PERIPHERAL_EFFECTIVE_CUTTING_EDGE_COUNT");
        public final static Property AdaptiveInterfaceMachineDirection = new Property(13, String.class, "adaptiveInterfaceMachineDirection", false, "ADAPTIVE_INTERFACE_MACHINE_DIRECTION");
        public final static Property ConnectionDiameterTolerance = new Property(14, String.class, "connectionDiameterTolerance", false, "CONNECTION_DIAMETER_TOLERANCE");
        public final static Property Grade = new Property(15, String.class, "grade", false, "GRADE");
        public final static Property Substrate = new Property(16, String.class, "substrate", false, "SUBSTRATE");
        public final static Property Coating = new Property(17, String.class, "coating", false, "COATING");
        public final static Property BasicStandardGroup = new Property(18, String.class, "basicStandardGroup", false, "BASIC_STANDARD_GROUP");
        public final static Property CoolantEntryStyleCode = new Property(19, String.class, "coolantEntryStyleCode", false, "COOLANT_ENTRY_STYLE_CODE");
        public final static Property ConnectionDiameter = new Property(20, String.class, "connectionDiameter", false, "CONNECTION_DIAMETER");
        public final static Property FunctionalLength = new Property(21, String.class, "functionalLength", false, "FUNCTIONAL_LENGTH");
        public final static Property FluteHelixAngle = new Property(22, String.class, "fluteHelixAngle", false, "FLUTE_HELIX_ANGLE");
        public final static Property AxialRakeAngle = new Property(23, String.class, "axialRakeAngle", false, "AXIAL_RAKE_ANGLE");
        public final static Property RadialRakeAngle = new Property(24, String.class, "radialRakeAngle", false, "RADIAL_RAKE_ANGLE");
        public final static Property AxialRearAngle = new Property(25, String.class, "axialRearAngle", false, "AXIAL_REAR_ANGLE");
        public final static Property RadialRearAngle = new Property(26, String.class, "radialRearAngle", false, "RADIAL_REAR_ANGLE");
        public final static Property CuttingEdgeAngle = new Property(27, String.class, "cuttingEdgeAngle", false, "CUTTING_EDGE_ANGLE");
        public final static Property FaceContactDiameter = new Property(28, String.class, "faceContactDiameter", false, "FACE_CONTACT_DIAMETER");
        public final static Property TipChamfer = new Property(29, String.class, "tipChamfer", false, "TIP_CHAMFER");
        public final static Property ChamferWidth = new Property(30, String.class, "chamferWidth", false, "CHAMFER_WIDTH");
        public final static Property CenterCuttingCapability = new Property(31, String.class, "centerCuttingCapability", false, "CENTER_CUTTING_CAPABILITY");
        public final static Property MaximumRegrinds = new Property(32, String.class, "maximumRegrinds", false, "MAXIMUM_REGRINDS");
        public final static Property MaxRotationalSpeed = new Property(33, String.class, "maxRotationalSpeed", false, "MAX_ROTATIONAL_SPEED");
        public final static Property Weight = new Property(34, String.class, "weight", false, "WEIGHT");
        public final static Property LifeCycleState = new Property(35, String.class, "lifeCycleState", false, "LIFE_CYCLE_STATE");
        public final static Property SuitableForMaterial = new Property(36, String.class, "suitableForMaterial", false, "SUITABLE_FOR_MATERIAL");
        public final static Property Application = new Property(37, String.class, "application", false, "APPLICATION");
        public final static Property Used = new Property(38, int.class, "used", false, "USED");
    }


    public ToolDao(DaoConfig config) {
        super(config);
    }
    
    public ToolDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOOL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" TEXT," + // 2: type
                "\"SERIAL\" TEXT," + // 3: serial
                "\"BRAND\" TEXT," + // 4: brand
                "\"CUTTING_DIAMETER\" TEXT," + // 5: cuttingDiameter
                "\"CUTTING_DIAMETER_TOLUPPER\" TEXT," + // 6: cuttingDiameterTOLUpper
                "\"CUTTING_DIAMETER_TOLLOWER\" TEXT," + // 7: cuttingDiameterTOLLower
                "\"FILLET_RADIUS\" TEXT," + // 8: filletRadius
                "\"DEPTH_OF_CUT_MAXIMUM\" TEXT," + // 9: depthOfCutMaximum
                "\"MAX_RAMPING_ANGLE\" TEXT," + // 10: maxRampingAngle
                "\"USABLE_LENGTH\" TEXT," + // 11: usableLength
                "\"PERIPHERAL_EFFECTIVE_CUTTING_EDGE_COUNT\" TEXT," + // 12: peripheralEffectiveCuttingEdgeCount
                "\"ADAPTIVE_INTERFACE_MACHINE_DIRECTION\" TEXT," + // 13: adaptiveInterfaceMachineDirection
                "\"CONNECTION_DIAMETER_TOLERANCE\" TEXT," + // 14: connectionDiameterTolerance
                "\"GRADE\" TEXT," + // 15: grade
                "\"SUBSTRATE\" TEXT," + // 16: substrate
                "\"COATING\" TEXT," + // 17: coating
                "\"BASIC_STANDARD_GROUP\" TEXT," + // 18: basicStandardGroup
                "\"COOLANT_ENTRY_STYLE_CODE\" TEXT," + // 19: coolantEntryStyleCode
                "\"CONNECTION_DIAMETER\" TEXT," + // 20: connectionDiameter
                "\"FUNCTIONAL_LENGTH\" TEXT," + // 21: functionalLength
                "\"FLUTE_HELIX_ANGLE\" TEXT," + // 22: fluteHelixAngle
                "\"AXIAL_RAKE_ANGLE\" TEXT," + // 23: axialRakeAngle
                "\"RADIAL_RAKE_ANGLE\" TEXT," + // 24: radialRakeAngle
                "\"AXIAL_REAR_ANGLE\" TEXT," + // 25: axialRearAngle
                "\"RADIAL_REAR_ANGLE\" TEXT," + // 26: radialRearAngle
                "\"CUTTING_EDGE_ANGLE\" TEXT," + // 27: cuttingEdgeAngle
                "\"FACE_CONTACT_DIAMETER\" TEXT," + // 28: faceContactDiameter
                "\"TIP_CHAMFER\" TEXT," + // 29: tipChamfer
                "\"CHAMFER_WIDTH\" TEXT," + // 30: chamferWidth
                "\"CENTER_CUTTING_CAPABILITY\" TEXT," + // 31: centerCuttingCapability
                "\"MAXIMUM_REGRINDS\" TEXT," + // 32: maximumRegrinds
                "\"MAX_ROTATIONAL_SPEED\" TEXT," + // 33: maxRotationalSpeed
                "\"WEIGHT\" TEXT," + // 34: weight
                "\"LIFE_CYCLE_STATE\" TEXT," + // 35: lifeCycleState
                "\"SUITABLE_FOR_MATERIAL\" TEXT," + // 36: suitableForMaterial
                "\"APPLICATION\" TEXT," + // 37: application
                "\"USED\" INTEGER NOT NULL );"); // 38: used
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOOL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tool entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(4, serial);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String cuttingDiameter = entity.getCuttingDiameter();
        if (cuttingDiameter != null) {
            stmt.bindString(6, cuttingDiameter);
        }
 
        String cuttingDiameterTOLUpper = entity.getCuttingDiameterTOLUpper();
        if (cuttingDiameterTOLUpper != null) {
            stmt.bindString(7, cuttingDiameterTOLUpper);
        }
 
        String cuttingDiameterTOLLower = entity.getCuttingDiameterTOLLower();
        if (cuttingDiameterTOLLower != null) {
            stmt.bindString(8, cuttingDiameterTOLLower);
        }
 
        String filletRadius = entity.getFilletRadius();
        if (filletRadius != null) {
            stmt.bindString(9, filletRadius);
        }
 
        String depthOfCutMaximum = entity.getDepthOfCutMaximum();
        if (depthOfCutMaximum != null) {
            stmt.bindString(10, depthOfCutMaximum);
        }
 
        String maxRampingAngle = entity.getMaxRampingAngle();
        if (maxRampingAngle != null) {
            stmt.bindString(11, maxRampingAngle);
        }
 
        String usableLength = entity.getUsableLength();
        if (usableLength != null) {
            stmt.bindString(12, usableLength);
        }
 
        String peripheralEffectiveCuttingEdgeCount = entity.getPeripheralEffectiveCuttingEdgeCount();
        if (peripheralEffectiveCuttingEdgeCount != null) {
            stmt.bindString(13, peripheralEffectiveCuttingEdgeCount);
        }
 
        String adaptiveInterfaceMachineDirection = entity.getAdaptiveInterfaceMachineDirection();
        if (adaptiveInterfaceMachineDirection != null) {
            stmt.bindString(14, adaptiveInterfaceMachineDirection);
        }
 
        String connectionDiameterTolerance = entity.getConnectionDiameterTolerance();
        if (connectionDiameterTolerance != null) {
            stmt.bindString(15, connectionDiameterTolerance);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(16, grade);
        }
 
        String substrate = entity.getSubstrate();
        if (substrate != null) {
            stmt.bindString(17, substrate);
        }
 
        String coating = entity.getCoating();
        if (coating != null) {
            stmt.bindString(18, coating);
        }
 
        String basicStandardGroup = entity.getBasicStandardGroup();
        if (basicStandardGroup != null) {
            stmt.bindString(19, basicStandardGroup);
        }
 
        String coolantEntryStyleCode = entity.getCoolantEntryStyleCode();
        if (coolantEntryStyleCode != null) {
            stmt.bindString(20, coolantEntryStyleCode);
        }
 
        String connectionDiameter = entity.getConnectionDiameter();
        if (connectionDiameter != null) {
            stmt.bindString(21, connectionDiameter);
        }
 
        String functionalLength = entity.getFunctionalLength();
        if (functionalLength != null) {
            stmt.bindString(22, functionalLength);
        }
 
        String fluteHelixAngle = entity.getFluteHelixAngle();
        if (fluteHelixAngle != null) {
            stmt.bindString(23, fluteHelixAngle);
        }
 
        String axialRakeAngle = entity.getAxialRakeAngle();
        if (axialRakeAngle != null) {
            stmt.bindString(24, axialRakeAngle);
        }
 
        String radialRakeAngle = entity.getRadialRakeAngle();
        if (radialRakeAngle != null) {
            stmt.bindString(25, radialRakeAngle);
        }
 
        String axialRearAngle = entity.getAxialRearAngle();
        if (axialRearAngle != null) {
            stmt.bindString(26, axialRearAngle);
        }
 
        String radialRearAngle = entity.getRadialRearAngle();
        if (radialRearAngle != null) {
            stmt.bindString(27, radialRearAngle);
        }
 
        String cuttingEdgeAngle = entity.getCuttingEdgeAngle();
        if (cuttingEdgeAngle != null) {
            stmt.bindString(28, cuttingEdgeAngle);
        }
 
        String faceContactDiameter = entity.getFaceContactDiameter();
        if (faceContactDiameter != null) {
            stmt.bindString(29, faceContactDiameter);
        }
 
        String tipChamfer = entity.getTipChamfer();
        if (tipChamfer != null) {
            stmt.bindString(30, tipChamfer);
        }
 
        String chamferWidth = entity.getChamferWidth();
        if (chamferWidth != null) {
            stmt.bindString(31, chamferWidth);
        }
 
        String centerCuttingCapability = entity.getCenterCuttingCapability();
        if (centerCuttingCapability != null) {
            stmt.bindString(32, centerCuttingCapability);
        }
 
        String maximumRegrinds = entity.getMaximumRegrinds();
        if (maximumRegrinds != null) {
            stmt.bindString(33, maximumRegrinds);
        }
 
        String maxRotationalSpeed = entity.getMaxRotationalSpeed();
        if (maxRotationalSpeed != null) {
            stmt.bindString(34, maxRotationalSpeed);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(35, weight);
        }
 
        String lifeCycleState = entity.getLifeCycleState();
        if (lifeCycleState != null) {
            stmt.bindString(36, lifeCycleState);
        }
 
        String suitableForMaterial = entity.getSuitableForMaterial();
        if (suitableForMaterial != null) {
            stmt.bindString(37, suitableForMaterial);
        }
 
        String application = entity.getApplication();
        if (application != null) {
            stmt.bindString(38, application);
        }
        stmt.bindLong(39, entity.getUsed());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tool entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(4, serial);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String cuttingDiameter = entity.getCuttingDiameter();
        if (cuttingDiameter != null) {
            stmt.bindString(6, cuttingDiameter);
        }
 
        String cuttingDiameterTOLUpper = entity.getCuttingDiameterTOLUpper();
        if (cuttingDiameterTOLUpper != null) {
            stmt.bindString(7, cuttingDiameterTOLUpper);
        }
 
        String cuttingDiameterTOLLower = entity.getCuttingDiameterTOLLower();
        if (cuttingDiameterTOLLower != null) {
            stmt.bindString(8, cuttingDiameterTOLLower);
        }
 
        String filletRadius = entity.getFilletRadius();
        if (filletRadius != null) {
            stmt.bindString(9, filletRadius);
        }
 
        String depthOfCutMaximum = entity.getDepthOfCutMaximum();
        if (depthOfCutMaximum != null) {
            stmt.bindString(10, depthOfCutMaximum);
        }
 
        String maxRampingAngle = entity.getMaxRampingAngle();
        if (maxRampingAngle != null) {
            stmt.bindString(11, maxRampingAngle);
        }
 
        String usableLength = entity.getUsableLength();
        if (usableLength != null) {
            stmt.bindString(12, usableLength);
        }
 
        String peripheralEffectiveCuttingEdgeCount = entity.getPeripheralEffectiveCuttingEdgeCount();
        if (peripheralEffectiveCuttingEdgeCount != null) {
            stmt.bindString(13, peripheralEffectiveCuttingEdgeCount);
        }
 
        String adaptiveInterfaceMachineDirection = entity.getAdaptiveInterfaceMachineDirection();
        if (adaptiveInterfaceMachineDirection != null) {
            stmt.bindString(14, adaptiveInterfaceMachineDirection);
        }
 
        String connectionDiameterTolerance = entity.getConnectionDiameterTolerance();
        if (connectionDiameterTolerance != null) {
            stmt.bindString(15, connectionDiameterTolerance);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(16, grade);
        }
 
        String substrate = entity.getSubstrate();
        if (substrate != null) {
            stmt.bindString(17, substrate);
        }
 
        String coating = entity.getCoating();
        if (coating != null) {
            stmt.bindString(18, coating);
        }
 
        String basicStandardGroup = entity.getBasicStandardGroup();
        if (basicStandardGroup != null) {
            stmt.bindString(19, basicStandardGroup);
        }
 
        String coolantEntryStyleCode = entity.getCoolantEntryStyleCode();
        if (coolantEntryStyleCode != null) {
            stmt.bindString(20, coolantEntryStyleCode);
        }
 
        String connectionDiameter = entity.getConnectionDiameter();
        if (connectionDiameter != null) {
            stmt.bindString(21, connectionDiameter);
        }
 
        String functionalLength = entity.getFunctionalLength();
        if (functionalLength != null) {
            stmt.bindString(22, functionalLength);
        }
 
        String fluteHelixAngle = entity.getFluteHelixAngle();
        if (fluteHelixAngle != null) {
            stmt.bindString(23, fluteHelixAngle);
        }
 
        String axialRakeAngle = entity.getAxialRakeAngle();
        if (axialRakeAngle != null) {
            stmt.bindString(24, axialRakeAngle);
        }
 
        String radialRakeAngle = entity.getRadialRakeAngle();
        if (radialRakeAngle != null) {
            stmt.bindString(25, radialRakeAngle);
        }
 
        String axialRearAngle = entity.getAxialRearAngle();
        if (axialRearAngle != null) {
            stmt.bindString(26, axialRearAngle);
        }
 
        String radialRearAngle = entity.getRadialRearAngle();
        if (radialRearAngle != null) {
            stmt.bindString(27, radialRearAngle);
        }
 
        String cuttingEdgeAngle = entity.getCuttingEdgeAngle();
        if (cuttingEdgeAngle != null) {
            stmt.bindString(28, cuttingEdgeAngle);
        }
 
        String faceContactDiameter = entity.getFaceContactDiameter();
        if (faceContactDiameter != null) {
            stmt.bindString(29, faceContactDiameter);
        }
 
        String tipChamfer = entity.getTipChamfer();
        if (tipChamfer != null) {
            stmt.bindString(30, tipChamfer);
        }
 
        String chamferWidth = entity.getChamferWidth();
        if (chamferWidth != null) {
            stmt.bindString(31, chamferWidth);
        }
 
        String centerCuttingCapability = entity.getCenterCuttingCapability();
        if (centerCuttingCapability != null) {
            stmt.bindString(32, centerCuttingCapability);
        }
 
        String maximumRegrinds = entity.getMaximumRegrinds();
        if (maximumRegrinds != null) {
            stmt.bindString(33, maximumRegrinds);
        }
 
        String maxRotationalSpeed = entity.getMaxRotationalSpeed();
        if (maxRotationalSpeed != null) {
            stmt.bindString(34, maxRotationalSpeed);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(35, weight);
        }
 
        String lifeCycleState = entity.getLifeCycleState();
        if (lifeCycleState != null) {
            stmt.bindString(36, lifeCycleState);
        }
 
        String suitableForMaterial = entity.getSuitableForMaterial();
        if (suitableForMaterial != null) {
            stmt.bindString(37, suitableForMaterial);
        }
 
        String application = entity.getApplication();
        if (application != null) {
            stmt.bindString(38, application);
        }
        stmt.bindLong(39, entity.getUsed());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tool readEntity(Cursor cursor, int offset) {
        Tool entity = new Tool( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serial
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brand
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cuttingDiameter
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cuttingDiameterTOLUpper
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cuttingDiameterTOLLower
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // filletRadius
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // depthOfCutMaximum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // maxRampingAngle
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // usableLength
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // peripheralEffectiveCuttingEdgeCount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // adaptiveInterfaceMachineDirection
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // connectionDiameterTolerance
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // grade
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // substrate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // coating
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // basicStandardGroup
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // coolantEntryStyleCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // connectionDiameter
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // functionalLength
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // fluteHelixAngle
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // axialRakeAngle
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // radialRakeAngle
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // axialRearAngle
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // radialRearAngle
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // cuttingEdgeAngle
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // faceContactDiameter
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // tipChamfer
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // chamferWidth
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // centerCuttingCapability
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // maximumRegrinds
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // maxRotationalSpeed
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // weight
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // lifeCycleState
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // suitableForMaterial
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // application
            cursor.getInt(offset + 38) // used
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tool entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSerial(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCuttingDiameter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCuttingDiameterTOLUpper(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCuttingDiameterTOLLower(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFilletRadius(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDepthOfCutMaximum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaxRampingAngle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUsableLength(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPeripheralEffectiveCuttingEdgeCount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAdaptiveInterfaceMachineDirection(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setConnectionDiameterTolerance(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGrade(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSubstrate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCoating(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBasicStandardGroup(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCoolantEntryStyleCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setConnectionDiameter(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFunctionalLength(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFluteHelixAngle(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAxialRakeAngle(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRadialRakeAngle(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setAxialRearAngle(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setRadialRearAngle(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCuttingEdgeAngle(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setFaceContactDiameter(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTipChamfer(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setChamferWidth(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCenterCuttingCapability(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMaximumRegrinds(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setMaxRotationalSpeed(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setWeight(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setLifeCycleState(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSuitableForMaterial(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setApplication(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setUsed(cursor.getInt(offset + 38));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tool entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tool entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tool entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
