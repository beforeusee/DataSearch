package com.example.a103.datasearch.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.a103.datasearch.data.CoefficientParameters;
import com.example.a103.datasearch.data.MaterialCuttingLimits;

import com.example.a103.datasearch.data.Material;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIAL".
*/
public class MaterialDao extends AbstractDao<Material, Long> {

    public static final String TABLENAME = "MATERIAL";

    /**
     * Properties of entity Material.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MaterialCategoriesId = new Property(1, Long.class, "materialCategoriesId", false, "MATERIAL_CATEGORIES_ID");
        public final static Property MaterialCuttingLimitsId = new Property(2, Long.class, "materialCuttingLimitsId", false, "MATERIAL_CUTTING_LIMITS_ID");
        public final static Property CoefficientParametersId = new Property(3, Long.class, "coefficientParametersId", false, "COEFFICIENT_PARAMETERS_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Ingredient = new Property(5, String.class, "ingredient", false, "INGREDIENT");
        public final static Property Hardness = new Property(6, String.class, "hardness", false, "HARDNESS");
        public final static Property Density = new Property(7, String.class, "density", false, "DENSITY");
        public final static Property ThermalConductivity = new Property(8, String.class, "thermalConductivity", false, "THERMAL_CONDUCTIVITY");
        public final static Property SpecificHeatCapacity = new Property(9, String.class, "specificHeatCapacity", false, "SPECIFIC_HEAT_CAPACITY");
        public final static Property YoungsModulus = new Property(10, String.class, "youngsModulus", false, "YOUNGS_MODULUS");
        public final static Property ImpactStrength = new Property(11, String.class, "impactStrength", false, "IMPACT_STRENGTH");
        public final static Property Extension = new Property(12, String.class, "extension", false, "EXTENSION");
        public final static Property AreaReduction = new Property(13, String.class, "areaReduction", false, "AREA_REDUCTION");
        public final static Property ConductiveCoefficient = new Property(14, String.class, "conductiveCoefficient", false, "CONDUCTIVE_COEFFICIENT");
        public final static Property Condition = new Property(15, String.class, "condition", false, "CONDITION");
        public final static Property TensileStrength = new Property(16, String.class, "tensileStrength", false, "TENSILE_STRENGTH");
        public final static Property YieldStrength = new Property(17, String.class, "yieldStrength", false, "YIELD_STRENGTH");
        public final static Property ShearStrength = new Property(18, String.class, "shearStrength", false, "SHEAR_STRENGTH");
        public final static Property HeatTreatment = new Property(19, String.class, "heatTreatment", false, "HEAT_TREATMENT");
        public final static Property LowMeltingPoint = new Property(20, String.class, "lowMeltingPoint", false, "LOW_MELTING_POINT");
        public final static Property HighMeltingPoint = new Property(21, String.class, "highMeltingPoint", false, "HIGH_MELTING_POINT");
        public final static Property ThermalExpansionCoefficient = new Property(22, String.class, "thermalExpansionCoefficient", false, "THERMAL_EXPANSION_COEFFICIENT");
        public final static Property Standard = new Property(23, String.class, "standard", false, "STANDARD");
    }

    private DaoSession daoSession;

    private Query<Material> materialCategories_MaterialsQuery;

    public MaterialDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MATERIAL_CATEGORIES_ID\" INTEGER," + // 1: materialCategoriesId
                "\"MATERIAL_CUTTING_LIMITS_ID\" INTEGER," + // 2: materialCuttingLimitsId
                "\"COEFFICIENT_PARAMETERS_ID\" INTEGER," + // 3: coefficientParametersId
                "\"NAME\" TEXT," + // 4: name
                "\"INGREDIENT\" TEXT," + // 5: ingredient
                "\"HARDNESS\" TEXT," + // 6: hardness
                "\"DENSITY\" TEXT," + // 7: density
                "\"THERMAL_CONDUCTIVITY\" TEXT," + // 8: thermalConductivity
                "\"SPECIFIC_HEAT_CAPACITY\" TEXT," + // 9: specificHeatCapacity
                "\"YOUNGS_MODULUS\" TEXT," + // 10: youngsModulus
                "\"IMPACT_STRENGTH\" TEXT," + // 11: impactStrength
                "\"EXTENSION\" TEXT," + // 12: extension
                "\"AREA_REDUCTION\" TEXT," + // 13: areaReduction
                "\"CONDUCTIVE_COEFFICIENT\" TEXT," + // 14: conductiveCoefficient
                "\"CONDITION\" TEXT," + // 15: condition
                "\"TENSILE_STRENGTH\" TEXT," + // 16: tensileStrength
                "\"YIELD_STRENGTH\" TEXT," + // 17: yieldStrength
                "\"SHEAR_STRENGTH\" TEXT," + // 18: shearStrength
                "\"HEAT_TREATMENT\" TEXT," + // 19: heatTreatment
                "\"LOW_MELTING_POINT\" TEXT," + // 20: lowMeltingPoint
                "\"HIGH_MELTING_POINT\" TEXT," + // 21: highMeltingPoint
                "\"THERMAL_EXPANSION_COEFFICIENT\" TEXT," + // 22: thermalExpansionCoefficient
                "\"STANDARD\" TEXT);"); // 23: standard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long materialCategoriesId = entity.getMaterialCategoriesId();
        if (materialCategoriesId != null) {
            stmt.bindLong(2, materialCategoriesId);
        }
 
        Long materialCuttingLimitsId = entity.getMaterialCuttingLimitsId();
        if (materialCuttingLimitsId != null) {
            stmt.bindLong(3, materialCuttingLimitsId);
        }
 
        Long coefficientParametersId = entity.getCoefficientParametersId();
        if (coefficientParametersId != null) {
            stmt.bindLong(4, coefficientParametersId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String ingredient = entity.getIngredient();
        if (ingredient != null) {
            stmt.bindString(6, ingredient);
        }
 
        String hardness = entity.getHardness();
        if (hardness != null) {
            stmt.bindString(7, hardness);
        }
 
        String density = entity.getDensity();
        if (density != null) {
            stmt.bindString(8, density);
        }
 
        String thermalConductivity = entity.getThermalConductivity();
        if (thermalConductivity != null) {
            stmt.bindString(9, thermalConductivity);
        }
 
        String specificHeatCapacity = entity.getSpecificHeatCapacity();
        if (specificHeatCapacity != null) {
            stmt.bindString(10, specificHeatCapacity);
        }
 
        String youngsModulus = entity.getYoungsModulus();
        if (youngsModulus != null) {
            stmt.bindString(11, youngsModulus);
        }
 
        String impactStrength = entity.getImpactStrength();
        if (impactStrength != null) {
            stmt.bindString(12, impactStrength);
        }
 
        String extension = entity.getExtension();
        if (extension != null) {
            stmt.bindString(13, extension);
        }
 
        String areaReduction = entity.getAreaReduction();
        if (areaReduction != null) {
            stmt.bindString(14, areaReduction);
        }
 
        String conductiveCoefficient = entity.getConductiveCoefficient();
        if (conductiveCoefficient != null) {
            stmt.bindString(15, conductiveCoefficient);
        }
 
        String condition = entity.getCondition();
        if (condition != null) {
            stmt.bindString(16, condition);
        }
 
        String tensileStrength = entity.getTensileStrength();
        if (tensileStrength != null) {
            stmt.bindString(17, tensileStrength);
        }
 
        String yieldStrength = entity.getYieldStrength();
        if (yieldStrength != null) {
            stmt.bindString(18, yieldStrength);
        }
 
        String shearStrength = entity.getShearStrength();
        if (shearStrength != null) {
            stmt.bindString(19, shearStrength);
        }
 
        String heatTreatment = entity.getHeatTreatment();
        if (heatTreatment != null) {
            stmt.bindString(20, heatTreatment);
        }
 
        String lowMeltingPoint = entity.getLowMeltingPoint();
        if (lowMeltingPoint != null) {
            stmt.bindString(21, lowMeltingPoint);
        }
 
        String highMeltingPoint = entity.getHighMeltingPoint();
        if (highMeltingPoint != null) {
            stmt.bindString(22, highMeltingPoint);
        }
 
        String thermalExpansionCoefficient = entity.getThermalExpansionCoefficient();
        if (thermalExpansionCoefficient != null) {
            stmt.bindString(23, thermalExpansionCoefficient);
        }
 
        String standard = entity.getStandard();
        if (standard != null) {
            stmt.bindString(24, standard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long materialCategoriesId = entity.getMaterialCategoriesId();
        if (materialCategoriesId != null) {
            stmt.bindLong(2, materialCategoriesId);
        }
 
        Long materialCuttingLimitsId = entity.getMaterialCuttingLimitsId();
        if (materialCuttingLimitsId != null) {
            stmt.bindLong(3, materialCuttingLimitsId);
        }
 
        Long coefficientParametersId = entity.getCoefficientParametersId();
        if (coefficientParametersId != null) {
            stmt.bindLong(4, coefficientParametersId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String ingredient = entity.getIngredient();
        if (ingredient != null) {
            stmt.bindString(6, ingredient);
        }
 
        String hardness = entity.getHardness();
        if (hardness != null) {
            stmt.bindString(7, hardness);
        }
 
        String density = entity.getDensity();
        if (density != null) {
            stmt.bindString(8, density);
        }
 
        String thermalConductivity = entity.getThermalConductivity();
        if (thermalConductivity != null) {
            stmt.bindString(9, thermalConductivity);
        }
 
        String specificHeatCapacity = entity.getSpecificHeatCapacity();
        if (specificHeatCapacity != null) {
            stmt.bindString(10, specificHeatCapacity);
        }
 
        String youngsModulus = entity.getYoungsModulus();
        if (youngsModulus != null) {
            stmt.bindString(11, youngsModulus);
        }
 
        String impactStrength = entity.getImpactStrength();
        if (impactStrength != null) {
            stmt.bindString(12, impactStrength);
        }
 
        String extension = entity.getExtension();
        if (extension != null) {
            stmt.bindString(13, extension);
        }
 
        String areaReduction = entity.getAreaReduction();
        if (areaReduction != null) {
            stmt.bindString(14, areaReduction);
        }
 
        String conductiveCoefficient = entity.getConductiveCoefficient();
        if (conductiveCoefficient != null) {
            stmt.bindString(15, conductiveCoefficient);
        }
 
        String condition = entity.getCondition();
        if (condition != null) {
            stmt.bindString(16, condition);
        }
 
        String tensileStrength = entity.getTensileStrength();
        if (tensileStrength != null) {
            stmt.bindString(17, tensileStrength);
        }
 
        String yieldStrength = entity.getYieldStrength();
        if (yieldStrength != null) {
            stmt.bindString(18, yieldStrength);
        }
 
        String shearStrength = entity.getShearStrength();
        if (shearStrength != null) {
            stmt.bindString(19, shearStrength);
        }
 
        String heatTreatment = entity.getHeatTreatment();
        if (heatTreatment != null) {
            stmt.bindString(20, heatTreatment);
        }
 
        String lowMeltingPoint = entity.getLowMeltingPoint();
        if (lowMeltingPoint != null) {
            stmt.bindString(21, lowMeltingPoint);
        }
 
        String highMeltingPoint = entity.getHighMeltingPoint();
        if (highMeltingPoint != null) {
            stmt.bindString(22, highMeltingPoint);
        }
 
        String thermalExpansionCoefficient = entity.getThermalExpansionCoefficient();
        if (thermalExpansionCoefficient != null) {
            stmt.bindString(23, thermalExpansionCoefficient);
        }
 
        String standard = entity.getStandard();
        if (standard != null) {
            stmt.bindString(24, standard);
        }
    }

    @Override
    protected final void attachEntity(Material entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Material readEntity(Cursor cursor, int offset) {
        Material entity = new Material( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // materialCategoriesId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // materialCuttingLimitsId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // coefficientParametersId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ingredient
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hardness
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // density
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // thermalConductivity
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // specificHeatCapacity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // youngsModulus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // impactStrength
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // extension
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // areaReduction
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // conductiveCoefficient
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // condition
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tensileStrength
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // yieldStrength
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // shearStrength
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // heatTreatment
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // lowMeltingPoint
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // highMeltingPoint
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // thermalExpansionCoefficient
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // standard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Material entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMaterialCategoriesId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMaterialCuttingLimitsId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCoefficientParametersId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIngredient(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHardness(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDensity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setThermalConductivity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSpecificHeatCapacity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYoungsModulus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImpactStrength(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExtension(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAreaReduction(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setConductiveCoefficient(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCondition(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTensileStrength(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setYieldStrength(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setShearStrength(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHeatTreatment(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLowMeltingPoint(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setHighMeltingPoint(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setThermalExpansionCoefficient(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setStandard(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Material entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Material entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Material entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "materials" to-many relationship of MaterialCategories. */
    public List<Material> _queryMaterialCategories_Materials(Long materialCategoriesId) {
        synchronized (this) {
            if (materialCategories_MaterialsQuery == null) {
                QueryBuilder<Material> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MaterialCategoriesId.eq(null));
                materialCategories_MaterialsQuery = queryBuilder.build();
            }
        }
        Query<Material> query = materialCategories_MaterialsQuery.forCurrentThread();
        query.setParameter(0, materialCategoriesId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMaterialCuttingLimitsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCoefficientParametersDao().getAllColumns());
            builder.append(" FROM MATERIAL T");
            builder.append(" LEFT JOIN MATERIAL_CUTTING_LIMITS T0 ON T.\"MATERIAL_CUTTING_LIMITS_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN COEFFICIENT_PARAMETERS T1 ON T.\"COEFFICIENT_PARAMETERS_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Material loadCurrentDeep(Cursor cursor, boolean lock) {
        Material entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MaterialCuttingLimits materialCuttingLimits = loadCurrentOther(daoSession.getMaterialCuttingLimitsDao(), cursor, offset);
        entity.setMaterialCuttingLimits(materialCuttingLimits);
        offset += daoSession.getMaterialCuttingLimitsDao().getAllColumns().length;

        CoefficientParameters coefficientParameters = loadCurrentOther(daoSession.getCoefficientParametersDao(), cursor, offset);
        entity.setCoefficientParameters(coefficientParameters);

        return entity;    
    }

    public Material loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Material> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Material> list = new ArrayList<Material>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Material> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Material> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
