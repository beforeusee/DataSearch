package com.example.a103.datasearch.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.a103.datasearch.data.CuttingConditions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUTTING_CONDITIONS".
*/
public class CuttingConditionsDao extends AbstractDao<CuttingConditions, Long> {

    public static final String TABLENAME = "CUTTING_CONDITIONS";

    /**
     * Properties of entity CuttingConditions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MachineInfo = new Property(1, String.class, "machineInfo", false, "MACHINE_INFO");
        public final static Property MaterialInfo = new Property(2, String.class, "materialInfo", false, "MATERIAL_INFO");
        public final static Property ToolInfo = new Property(3, String.class, "toolInfo", false, "TOOL_INFO");
        public final static Property ToolSuspensionLen = new Property(4, String.class, "toolSuspensionLen", false, "TOOL_SUSPENSION_LEN");
        public final static Property CuttingMethod = new Property(5, String.class, "cuttingMethod", false, "CUTTING_METHOD");
        public final static Property CuttingDirection = new Property(6, String.class, "cuttingDirection", false, "CUTTING_DIRECTION");
        public final static Property WorkpieceType = new Property(7, String.class, "workpieceType", false, "WORKPIECE_TYPE");
        public final static Property ProcessStep = new Property(8, String.class, "processStep", false, "PROCESS_STEP");
        public final static Property ProcessSurface = new Property(9, String.class, "processSurface", false, "PROCESS_SURFACE");
        public final static Property WorkpieceRemark = new Property(10, String.class, "workpieceRemark", false, "WORKPIECE_REMARK");
        public final static Property ModeX1 = new Property(11, String.class, "modeX1", false, "MODE_X1");
        public final static Property ModeX2 = new Property(12, String.class, "modeX2", false, "MODE_X2");
        public final static Property ModeX3 = new Property(13, String.class, "modeX3", false, "MODE_X3");
        public final static Property ModeY1 = new Property(14, String.class, "modeY1", false, "MODE_Y1");
        public final static Property ModeY2 = new Property(15, String.class, "modeY2", false, "MODE_Y2");
        public final static Property ModeY3 = new Property(16, String.class, "modeY3", false, "MODE_Y3");
    }

    private DaoSession daoSession;


    public CuttingConditionsDao(DaoConfig config) {
        super(config);
    }
    
    public CuttingConditionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUTTING_CONDITIONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MACHINE_INFO\" TEXT," + // 1: machineInfo
                "\"MATERIAL_INFO\" TEXT," + // 2: materialInfo
                "\"TOOL_INFO\" TEXT," + // 3: toolInfo
                "\"TOOL_SUSPENSION_LEN\" TEXT," + // 4: toolSuspensionLen
                "\"CUTTING_METHOD\" TEXT," + // 5: cuttingMethod
                "\"CUTTING_DIRECTION\" TEXT," + // 6: cuttingDirection
                "\"WORKPIECE_TYPE\" TEXT," + // 7: workpieceType
                "\"PROCESS_STEP\" TEXT," + // 8: processStep
                "\"PROCESS_SURFACE\" TEXT," + // 9: processSurface
                "\"WORKPIECE_REMARK\" TEXT," + // 10: workpieceRemark
                "\"MODE_X1\" TEXT," + // 11: modeX1
                "\"MODE_X2\" TEXT," + // 12: modeX2
                "\"MODE_X3\" TEXT," + // 13: modeX3
                "\"MODE_Y1\" TEXT," + // 14: modeY1
                "\"MODE_Y2\" TEXT," + // 15: modeY2
                "\"MODE_Y3\" TEXT);"); // 16: modeY3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUTTING_CONDITIONS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CuttingConditions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineInfo = entity.getMachineInfo();
        if (machineInfo != null) {
            stmt.bindString(2, machineInfo);
        }
 
        String materialInfo = entity.getMaterialInfo();
        if (materialInfo != null) {
            stmt.bindString(3, materialInfo);
        }
 
        String toolInfo = entity.getToolInfo();
        if (toolInfo != null) {
            stmt.bindString(4, toolInfo);
        }
 
        String toolSuspensionLen = entity.getToolSuspensionLen();
        if (toolSuspensionLen != null) {
            stmt.bindString(5, toolSuspensionLen);
        }
 
        String cuttingMethod = entity.getCuttingMethod();
        if (cuttingMethod != null) {
            stmt.bindString(6, cuttingMethod);
        }
 
        String cuttingDirection = entity.getCuttingDirection();
        if (cuttingDirection != null) {
            stmt.bindString(7, cuttingDirection);
        }
 
        String workpieceType = entity.getWorkpieceType();
        if (workpieceType != null) {
            stmt.bindString(8, workpieceType);
        }
 
        String processStep = entity.getProcessStep();
        if (processStep != null) {
            stmt.bindString(9, processStep);
        }
 
        String processSurface = entity.getProcessSurface();
        if (processSurface != null) {
            stmt.bindString(10, processSurface);
        }
 
        String workpieceRemark = entity.getWorkpieceRemark();
        if (workpieceRemark != null) {
            stmt.bindString(11, workpieceRemark);
        }
 
        String modeX1 = entity.getModeX1();
        if (modeX1 != null) {
            stmt.bindString(12, modeX1);
        }
 
        String modeX2 = entity.getModeX2();
        if (modeX2 != null) {
            stmt.bindString(13, modeX2);
        }
 
        String modeX3 = entity.getModeX3();
        if (modeX3 != null) {
            stmt.bindString(14, modeX3);
        }
 
        String modeY1 = entity.getModeY1();
        if (modeY1 != null) {
            stmt.bindString(15, modeY1);
        }
 
        String modeY2 = entity.getModeY2();
        if (modeY2 != null) {
            stmt.bindString(16, modeY2);
        }
 
        String modeY3 = entity.getModeY3();
        if (modeY3 != null) {
            stmt.bindString(17, modeY3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CuttingConditions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineInfo = entity.getMachineInfo();
        if (machineInfo != null) {
            stmt.bindString(2, machineInfo);
        }
 
        String materialInfo = entity.getMaterialInfo();
        if (materialInfo != null) {
            stmt.bindString(3, materialInfo);
        }
 
        String toolInfo = entity.getToolInfo();
        if (toolInfo != null) {
            stmt.bindString(4, toolInfo);
        }
 
        String toolSuspensionLen = entity.getToolSuspensionLen();
        if (toolSuspensionLen != null) {
            stmt.bindString(5, toolSuspensionLen);
        }
 
        String cuttingMethod = entity.getCuttingMethod();
        if (cuttingMethod != null) {
            stmt.bindString(6, cuttingMethod);
        }
 
        String cuttingDirection = entity.getCuttingDirection();
        if (cuttingDirection != null) {
            stmt.bindString(7, cuttingDirection);
        }
 
        String workpieceType = entity.getWorkpieceType();
        if (workpieceType != null) {
            stmt.bindString(8, workpieceType);
        }
 
        String processStep = entity.getProcessStep();
        if (processStep != null) {
            stmt.bindString(9, processStep);
        }
 
        String processSurface = entity.getProcessSurface();
        if (processSurface != null) {
            stmt.bindString(10, processSurface);
        }
 
        String workpieceRemark = entity.getWorkpieceRemark();
        if (workpieceRemark != null) {
            stmt.bindString(11, workpieceRemark);
        }
 
        String modeX1 = entity.getModeX1();
        if (modeX1 != null) {
            stmt.bindString(12, modeX1);
        }
 
        String modeX2 = entity.getModeX2();
        if (modeX2 != null) {
            stmt.bindString(13, modeX2);
        }
 
        String modeX3 = entity.getModeX3();
        if (modeX3 != null) {
            stmt.bindString(14, modeX3);
        }
 
        String modeY1 = entity.getModeY1();
        if (modeY1 != null) {
            stmt.bindString(15, modeY1);
        }
 
        String modeY2 = entity.getModeY2();
        if (modeY2 != null) {
            stmt.bindString(16, modeY2);
        }
 
        String modeY3 = entity.getModeY3();
        if (modeY3 != null) {
            stmt.bindString(17, modeY3);
        }
    }

    @Override
    protected final void attachEntity(CuttingConditions entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CuttingConditions readEntity(Cursor cursor, int offset) {
        CuttingConditions entity = new CuttingConditions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // machineInfo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // materialInfo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // toolInfo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // toolSuspensionLen
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cuttingMethod
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cuttingDirection
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // workpieceType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // processStep
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // processSurface
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // workpieceRemark
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // modeX1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // modeX2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // modeX3
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // modeY1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modeY2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // modeY3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CuttingConditions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMachineInfo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMaterialInfo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToolInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setToolSuspensionLen(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCuttingMethod(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCuttingDirection(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWorkpieceType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProcessStep(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProcessSurface(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWorkpieceRemark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setModeX1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setModeX2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setModeX3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setModeY1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setModeY2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModeY3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CuttingConditions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CuttingConditions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CuttingConditions entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
