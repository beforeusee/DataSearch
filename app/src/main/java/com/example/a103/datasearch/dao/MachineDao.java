package com.example.a103.datasearch.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.a103.datasearch.data.Machine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MACHINE".
*/
public class MachineDao extends AbstractDao<Machine, Long> {

    public static final String TABLENAME = "MACHINE";

    /**
     * Properties of entity Machine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Series = new Property(3, String.class, "series", false, "SERIES");
        public final static Property Brand = new Property(4, String.class, "brand", false, "BRAND");
        public final static Property AxisNum = new Property(5, String.class, "axisNum", false, "AXIS_NUM");
        public final static Property ControlSYS = new Property(6, String.class, "controlSYS", false, "CONTROL_SYS");
        public final static Property MachineTableSize = new Property(7, String.class, "machineTableSize", false, "MACHINE_TABLE_SIZE");
        public final static Property MaxWorkpieceWeight = new Property(8, String.class, "maxWorkpieceWeight", false, "MAX_WORKPIECE_WEIGHT");
        public final static Property AutoToolChange = new Property(9, String.class, "autoToolChange", false, "AUTO_TOOL_CHANGE");
        public final static Property RotaryTable = new Property(10, String.class, "rotaryTable", false, "ROTARY_TABLE");
        public final static Property Weight = new Property(11, String.class, "weight", false, "WEIGHT");
        public final static Property Size = new Property(12, String.class, "size", false, "SIZE");
        public final static Property Layout = new Property(13, String.class, "layout", false, "LAYOUT");
        public final static Property SpindleType = new Property(14, String.class, "spindleType", false, "SPINDLE_TYPE");
        public final static Property SpindleNum = new Property(15, String.class, "spindleNum", false, "SPINDLE_NUM");
        public final static Property MaxSpindleRpm = new Property(16, String.class, "maxSpindleRpm", false, "MAX_SPINDLE_RPM");
        public final static Property MinSpindleRpm = new Property(17, String.class, "minSpindleRpm", false, "MIN_SPINDLE_RPM");
        public final static Property SpindlePower = new Property(18, String.class, "spindlePower", false, "SPINDLE_POWER");
        public final static Property MaxSpindleTorque = new Property(19, String.class, "maxSpindleTorque", false, "MAX_SPINDLE_TORQUE");
        public final static Property SpindleTravel = new Property(20, String.class, "spindleTravel", false, "SPINDLE_TRAVEL");
        public final static Property SpindleDistanceToTable = new Property(21, String.class, "spindleDistanceToTable", false, "SPINDLE_DISTANCE_TO_TABLE");
        public final static Property SpindleToolAdopter = new Property(22, String.class, "spindleToolAdopter", false, "SPINDLE_TOOL_ADOPTER");
        public final static Property FeedAxisNum = new Property(23, String.class, "feedAxisNum", false, "FEED_AXIS_NUM");
        public final static Property FeedAxisDirection = new Property(24, String.class, "feedAxisDirection", false, "FEED_AXIS_DIRECTION");
        public final static Property FeedAxisTravel = new Property(25, String.class, "feedAxisTravel", false, "FEED_AXIS_TRAVEL");
        public final static Property FeedAxisAccuracy = new Property(26, String.class, "feedAxisAccuracy", false, "FEED_AXIS_ACCURACY");
        public final static Property FeedAxisRepeatability = new Property(27, String.class, "feedAxisRepeatability", false, "FEED_AXIS_REPEATABILITY");
        public final static Property FeedAxisFastSpeed = new Property(28, String.class, "feedAxisFastSpeed", false, "FEED_AXIS_FAST_SPEED");
        public final static Property FeedAxisCuttingSpeed = new Property(29, String.class, "feedAxisCuttingSpeed", false, "FEED_AXIS_CUTTING_SPEED");
        public final static Property FeedAxisMaxAcceleration = new Property(30, String.class, "feedAxisMaxAcceleration", false, "FEED_AXIS_MAX_ACCELERATION");
        public final static Property FeedAxisPower = new Property(31, String.class, "feedAxisPower", false, "FEED_AXIS_POWER");
        public final static Property FeedAxisTorque = new Property(32, String.class, "feedAxisTorque", false, "FEED_AXIS_TORQUE");
        public final static Property FeedAxisMaxTorque = new Property(33, String.class, "feedAxisMaxTorque", false, "FEED_AXIS_MAX_TORQUE");
        public final static Property ToolLibraryToolNum = new Property(34, String.class, "toolLibraryToolNum", false, "TOOL_LIBRARY_TOOL_NUM");
        public final static Property ToolLibraryMaxToolDiameter = new Property(35, String.class, "toolLibraryMaxToolDiameter", false, "TOOL_LIBRARY_MAX_TOOL_DIAMETER");
        public final static Property ToolLibraryMaxToolLength = new Property(36, String.class, "toolLibraryMaxToolLength", false, "TOOL_LIBRARY_MAX_TOOL_LENGTH");
        public final static Property ToolLibraryMaxToolWeight = new Property(37, String.class, "toolLibraryMaxToolWeight", false, "TOOL_LIBRARY_MAX_TOOL_WEIGHT");
        public final static Property MachineIntroduction = new Property(38, String.class, "machineIntroduction", false, "MACHINE_INTRODUCTION");
        public final static Property ImageUri = new Property(39, String.class, "imageUri", false, "IMAGE_URI");
    }


    public MachineDao(DaoConfig config) {
        super(config);
    }
    
    public MachineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MACHINE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" TEXT," + // 2: type
                "\"SERIES\" TEXT," + // 3: series
                "\"BRAND\" TEXT," + // 4: brand
                "\"AXIS_NUM\" TEXT," + // 5: axisNum
                "\"CONTROL_SYS\" TEXT," + // 6: controlSYS
                "\"MACHINE_TABLE_SIZE\" TEXT," + // 7: machineTableSize
                "\"MAX_WORKPIECE_WEIGHT\" TEXT," + // 8: maxWorkpieceWeight
                "\"AUTO_TOOL_CHANGE\" TEXT," + // 9: autoToolChange
                "\"ROTARY_TABLE\" TEXT," + // 10: rotaryTable
                "\"WEIGHT\" TEXT," + // 11: weight
                "\"SIZE\" TEXT," + // 12: size
                "\"LAYOUT\" TEXT," + // 13: layout
                "\"SPINDLE_TYPE\" TEXT," + // 14: spindleType
                "\"SPINDLE_NUM\" TEXT," + // 15: spindleNum
                "\"MAX_SPINDLE_RPM\" TEXT," + // 16: maxSpindleRpm
                "\"MIN_SPINDLE_RPM\" TEXT," + // 17: minSpindleRpm
                "\"SPINDLE_POWER\" TEXT," + // 18: spindlePower
                "\"MAX_SPINDLE_TORQUE\" TEXT," + // 19: maxSpindleTorque
                "\"SPINDLE_TRAVEL\" TEXT," + // 20: spindleTravel
                "\"SPINDLE_DISTANCE_TO_TABLE\" TEXT," + // 21: spindleDistanceToTable
                "\"SPINDLE_TOOL_ADOPTER\" TEXT," + // 22: spindleToolAdopter
                "\"FEED_AXIS_NUM\" TEXT," + // 23: feedAxisNum
                "\"FEED_AXIS_DIRECTION\" TEXT," + // 24: feedAxisDirection
                "\"FEED_AXIS_TRAVEL\" TEXT," + // 25: feedAxisTravel
                "\"FEED_AXIS_ACCURACY\" TEXT," + // 26: feedAxisAccuracy
                "\"FEED_AXIS_REPEATABILITY\" TEXT," + // 27: feedAxisRepeatability
                "\"FEED_AXIS_FAST_SPEED\" TEXT," + // 28: feedAxisFastSpeed
                "\"FEED_AXIS_CUTTING_SPEED\" TEXT," + // 29: feedAxisCuttingSpeed
                "\"FEED_AXIS_MAX_ACCELERATION\" TEXT," + // 30: feedAxisMaxAcceleration
                "\"FEED_AXIS_POWER\" TEXT," + // 31: feedAxisPower
                "\"FEED_AXIS_TORQUE\" TEXT," + // 32: feedAxisTorque
                "\"FEED_AXIS_MAX_TORQUE\" TEXT," + // 33: feedAxisMaxTorque
                "\"TOOL_LIBRARY_TOOL_NUM\" TEXT," + // 34: toolLibraryToolNum
                "\"TOOL_LIBRARY_MAX_TOOL_DIAMETER\" TEXT," + // 35: toolLibraryMaxToolDiameter
                "\"TOOL_LIBRARY_MAX_TOOL_LENGTH\" TEXT," + // 36: toolLibraryMaxToolLength
                "\"TOOL_LIBRARY_MAX_TOOL_WEIGHT\" TEXT," + // 37: toolLibraryMaxToolWeight
                "\"MACHINE_INTRODUCTION\" TEXT," + // 38: machineIntroduction
                "\"IMAGE_URI\" TEXT);"); // 39: imageUri
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MACHINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Machine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(4, series);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String axisNum = entity.getAxisNum();
        if (axisNum != null) {
            stmt.bindString(6, axisNum);
        }
 
        String controlSYS = entity.getControlSYS();
        if (controlSYS != null) {
            stmt.bindString(7, controlSYS);
        }
 
        String machineTableSize = entity.getMachineTableSize();
        if (machineTableSize != null) {
            stmt.bindString(8, machineTableSize);
        }
 
        String maxWorkpieceWeight = entity.getMaxWorkpieceWeight();
        if (maxWorkpieceWeight != null) {
            stmt.bindString(9, maxWorkpieceWeight);
        }
 
        String autoToolChange = entity.getAutoToolChange();
        if (autoToolChange != null) {
            stmt.bindString(10, autoToolChange);
        }
 
        String rotaryTable = entity.getRotaryTable();
        if (rotaryTable != null) {
            stmt.bindString(11, rotaryTable);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(12, weight);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(13, size);
        }
 
        String layout = entity.getLayout();
        if (layout != null) {
            stmt.bindString(14, layout);
        }
 
        String spindleType = entity.getSpindleType();
        if (spindleType != null) {
            stmt.bindString(15, spindleType);
        }
 
        String spindleNum = entity.getSpindleNum();
        if (spindleNum != null) {
            stmt.bindString(16, spindleNum);
        }
 
        String maxSpindleRpm = entity.getMaxSpindleRpm();
        if (maxSpindleRpm != null) {
            stmt.bindString(17, maxSpindleRpm);
        }
 
        String minSpindleRpm = entity.getMinSpindleRpm();
        if (minSpindleRpm != null) {
            stmt.bindString(18, minSpindleRpm);
        }
 
        String spindlePower = entity.getSpindlePower();
        if (spindlePower != null) {
            stmt.bindString(19, spindlePower);
        }
 
        String maxSpindleTorque = entity.getMaxSpindleTorque();
        if (maxSpindleTorque != null) {
            stmt.bindString(20, maxSpindleTorque);
        }
 
        String spindleTravel = entity.getSpindleTravel();
        if (spindleTravel != null) {
            stmt.bindString(21, spindleTravel);
        }
 
        String spindleDistanceToTable = entity.getSpindleDistanceToTable();
        if (spindleDistanceToTable != null) {
            stmt.bindString(22, spindleDistanceToTable);
        }
 
        String spindleToolAdopter = entity.getSpindleToolAdopter();
        if (spindleToolAdopter != null) {
            stmt.bindString(23, spindleToolAdopter);
        }
 
        String feedAxisNum = entity.getFeedAxisNum();
        if (feedAxisNum != null) {
            stmt.bindString(24, feedAxisNum);
        }
 
        String feedAxisDirection = entity.getFeedAxisDirection();
        if (feedAxisDirection != null) {
            stmt.bindString(25, feedAxisDirection);
        }
 
        String feedAxisTravel = entity.getFeedAxisTravel();
        if (feedAxisTravel != null) {
            stmt.bindString(26, feedAxisTravel);
        }
 
        String feedAxisAccuracy = entity.getFeedAxisAccuracy();
        if (feedAxisAccuracy != null) {
            stmt.bindString(27, feedAxisAccuracy);
        }
 
        String feedAxisRepeatability = entity.getFeedAxisRepeatability();
        if (feedAxisRepeatability != null) {
            stmt.bindString(28, feedAxisRepeatability);
        }
 
        String feedAxisFastSpeed = entity.getFeedAxisFastSpeed();
        if (feedAxisFastSpeed != null) {
            stmt.bindString(29, feedAxisFastSpeed);
        }
 
        String feedAxisCuttingSpeed = entity.getFeedAxisCuttingSpeed();
        if (feedAxisCuttingSpeed != null) {
            stmt.bindString(30, feedAxisCuttingSpeed);
        }
 
        String feedAxisMaxAcceleration = entity.getFeedAxisMaxAcceleration();
        if (feedAxisMaxAcceleration != null) {
            stmt.bindString(31, feedAxisMaxAcceleration);
        }
 
        String feedAxisPower = entity.getFeedAxisPower();
        if (feedAxisPower != null) {
            stmt.bindString(32, feedAxisPower);
        }
 
        String feedAxisTorque = entity.getFeedAxisTorque();
        if (feedAxisTorque != null) {
            stmt.bindString(33, feedAxisTorque);
        }
 
        String feedAxisMaxTorque = entity.getFeedAxisMaxTorque();
        if (feedAxisMaxTorque != null) {
            stmt.bindString(34, feedAxisMaxTorque);
        }
 
        String toolLibraryToolNum = entity.getToolLibraryToolNum();
        if (toolLibraryToolNum != null) {
            stmt.bindString(35, toolLibraryToolNum);
        }
 
        String toolLibraryMaxToolDiameter = entity.getToolLibraryMaxToolDiameter();
        if (toolLibraryMaxToolDiameter != null) {
            stmt.bindString(36, toolLibraryMaxToolDiameter);
        }
 
        String toolLibraryMaxToolLength = entity.getToolLibraryMaxToolLength();
        if (toolLibraryMaxToolLength != null) {
            stmt.bindString(37, toolLibraryMaxToolLength);
        }
 
        String toolLibraryMaxToolWeight = entity.getToolLibraryMaxToolWeight();
        if (toolLibraryMaxToolWeight != null) {
            stmt.bindString(38, toolLibraryMaxToolWeight);
        }
 
        String machineIntroduction = entity.getMachineIntroduction();
        if (machineIntroduction != null) {
            stmt.bindString(39, machineIntroduction);
        }
 
        String imageUri = entity.getImageUri();
        if (imageUri != null) {
            stmt.bindString(40, imageUri);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Machine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(4, series);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String axisNum = entity.getAxisNum();
        if (axisNum != null) {
            stmt.bindString(6, axisNum);
        }
 
        String controlSYS = entity.getControlSYS();
        if (controlSYS != null) {
            stmt.bindString(7, controlSYS);
        }
 
        String machineTableSize = entity.getMachineTableSize();
        if (machineTableSize != null) {
            stmt.bindString(8, machineTableSize);
        }
 
        String maxWorkpieceWeight = entity.getMaxWorkpieceWeight();
        if (maxWorkpieceWeight != null) {
            stmt.bindString(9, maxWorkpieceWeight);
        }
 
        String autoToolChange = entity.getAutoToolChange();
        if (autoToolChange != null) {
            stmt.bindString(10, autoToolChange);
        }
 
        String rotaryTable = entity.getRotaryTable();
        if (rotaryTable != null) {
            stmt.bindString(11, rotaryTable);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(12, weight);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(13, size);
        }
 
        String layout = entity.getLayout();
        if (layout != null) {
            stmt.bindString(14, layout);
        }
 
        String spindleType = entity.getSpindleType();
        if (spindleType != null) {
            stmt.bindString(15, spindleType);
        }
 
        String spindleNum = entity.getSpindleNum();
        if (spindleNum != null) {
            stmt.bindString(16, spindleNum);
        }
 
        String maxSpindleRpm = entity.getMaxSpindleRpm();
        if (maxSpindleRpm != null) {
            stmt.bindString(17, maxSpindleRpm);
        }
 
        String minSpindleRpm = entity.getMinSpindleRpm();
        if (minSpindleRpm != null) {
            stmt.bindString(18, minSpindleRpm);
        }
 
        String spindlePower = entity.getSpindlePower();
        if (spindlePower != null) {
            stmt.bindString(19, spindlePower);
        }
 
        String maxSpindleTorque = entity.getMaxSpindleTorque();
        if (maxSpindleTorque != null) {
            stmt.bindString(20, maxSpindleTorque);
        }
 
        String spindleTravel = entity.getSpindleTravel();
        if (spindleTravel != null) {
            stmt.bindString(21, spindleTravel);
        }
 
        String spindleDistanceToTable = entity.getSpindleDistanceToTable();
        if (spindleDistanceToTable != null) {
            stmt.bindString(22, spindleDistanceToTable);
        }
 
        String spindleToolAdopter = entity.getSpindleToolAdopter();
        if (spindleToolAdopter != null) {
            stmt.bindString(23, spindleToolAdopter);
        }
 
        String feedAxisNum = entity.getFeedAxisNum();
        if (feedAxisNum != null) {
            stmt.bindString(24, feedAxisNum);
        }
 
        String feedAxisDirection = entity.getFeedAxisDirection();
        if (feedAxisDirection != null) {
            stmt.bindString(25, feedAxisDirection);
        }
 
        String feedAxisTravel = entity.getFeedAxisTravel();
        if (feedAxisTravel != null) {
            stmt.bindString(26, feedAxisTravel);
        }
 
        String feedAxisAccuracy = entity.getFeedAxisAccuracy();
        if (feedAxisAccuracy != null) {
            stmt.bindString(27, feedAxisAccuracy);
        }
 
        String feedAxisRepeatability = entity.getFeedAxisRepeatability();
        if (feedAxisRepeatability != null) {
            stmt.bindString(28, feedAxisRepeatability);
        }
 
        String feedAxisFastSpeed = entity.getFeedAxisFastSpeed();
        if (feedAxisFastSpeed != null) {
            stmt.bindString(29, feedAxisFastSpeed);
        }
 
        String feedAxisCuttingSpeed = entity.getFeedAxisCuttingSpeed();
        if (feedAxisCuttingSpeed != null) {
            stmt.bindString(30, feedAxisCuttingSpeed);
        }
 
        String feedAxisMaxAcceleration = entity.getFeedAxisMaxAcceleration();
        if (feedAxisMaxAcceleration != null) {
            stmt.bindString(31, feedAxisMaxAcceleration);
        }
 
        String feedAxisPower = entity.getFeedAxisPower();
        if (feedAxisPower != null) {
            stmt.bindString(32, feedAxisPower);
        }
 
        String feedAxisTorque = entity.getFeedAxisTorque();
        if (feedAxisTorque != null) {
            stmt.bindString(33, feedAxisTorque);
        }
 
        String feedAxisMaxTorque = entity.getFeedAxisMaxTorque();
        if (feedAxisMaxTorque != null) {
            stmt.bindString(34, feedAxisMaxTorque);
        }
 
        String toolLibraryToolNum = entity.getToolLibraryToolNum();
        if (toolLibraryToolNum != null) {
            stmt.bindString(35, toolLibraryToolNum);
        }
 
        String toolLibraryMaxToolDiameter = entity.getToolLibraryMaxToolDiameter();
        if (toolLibraryMaxToolDiameter != null) {
            stmt.bindString(36, toolLibraryMaxToolDiameter);
        }
 
        String toolLibraryMaxToolLength = entity.getToolLibraryMaxToolLength();
        if (toolLibraryMaxToolLength != null) {
            stmt.bindString(37, toolLibraryMaxToolLength);
        }
 
        String toolLibraryMaxToolWeight = entity.getToolLibraryMaxToolWeight();
        if (toolLibraryMaxToolWeight != null) {
            stmt.bindString(38, toolLibraryMaxToolWeight);
        }
 
        String machineIntroduction = entity.getMachineIntroduction();
        if (machineIntroduction != null) {
            stmt.bindString(39, machineIntroduction);
        }
 
        String imageUri = entity.getImageUri();
        if (imageUri != null) {
            stmt.bindString(40, imageUri);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Machine readEntity(Cursor cursor, int offset) {
        Machine entity = new Machine( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // series
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brand
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // axisNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // controlSYS
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // machineTableSize
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // maxWorkpieceWeight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // autoToolChange
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rotaryTable
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // weight
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // size
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // layout
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // spindleType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // spindleNum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // maxSpindleRpm
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // minSpindleRpm
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // spindlePower
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // maxSpindleTorque
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // spindleTravel
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // spindleDistanceToTable
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // spindleToolAdopter
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // feedAxisNum
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // feedAxisDirection
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // feedAxisTravel
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // feedAxisAccuracy
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // feedAxisRepeatability
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // feedAxisFastSpeed
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // feedAxisCuttingSpeed
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // feedAxisMaxAcceleration
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // feedAxisPower
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // feedAxisTorque
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // feedAxisMaxTorque
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // toolLibraryToolNum
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // toolLibraryMaxToolDiameter
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // toolLibraryMaxToolLength
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // toolLibraryMaxToolWeight
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // machineIntroduction
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // imageUri
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Machine entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSeries(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAxisNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setControlSYS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMachineTableSize(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMaxWorkpieceWeight(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAutoToolChange(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRotaryTable(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWeight(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSize(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLayout(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSpindleType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSpindleNum(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMaxSpindleRpm(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMinSpindleRpm(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSpindlePower(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMaxSpindleTorque(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSpindleTravel(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSpindleDistanceToTable(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSpindleToolAdopter(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFeedAxisNum(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFeedAxisDirection(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setFeedAxisTravel(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFeedAxisAccuracy(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setFeedAxisRepeatability(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setFeedAxisFastSpeed(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setFeedAxisCuttingSpeed(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setFeedAxisMaxAcceleration(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setFeedAxisPower(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setFeedAxisTorque(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setFeedAxisMaxTorque(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setToolLibraryToolNum(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setToolLibraryMaxToolDiameter(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setToolLibraryMaxToolLength(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setToolLibraryMaxToolWeight(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setMachineIntroduction(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setImageUri(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Machine entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Machine entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Machine entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
